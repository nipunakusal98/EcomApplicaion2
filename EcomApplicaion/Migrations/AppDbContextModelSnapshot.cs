// <auto-generated />
using System;
using EcomApplicaion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcomApplicaion.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcomApplicaion.Models.AntivirusSoftware", b =>
                {
                    b.Property<int>("AntivirusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AntivirusID"));

                    b.Property<string>("AntivirusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AntivirusID");

                    b.ToTable("AntivirusSoftwares");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryPictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EcomApplicaion.Models.CustomerConfiguration", b =>
                {
                    b.Property<int>("CustomerConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerConfigID"));

                    b.Property<int>("AntivirusID")
                        .HasColumnType("int");

                    b.Property<decimal>("ConfigurationPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("MemoryID")
                        .HasColumnType("int");

                    b.Property<int>("ModelID")
                        .HasColumnType("int");

                    b.Property<int>("ProcessorID")
                        .HasColumnType("int");

                    b.Property<int>("VGAID")
                        .HasColumnType("int");

                    b.HasKey("CustomerConfigID");

                    b.HasIndex("AntivirusID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("MemoryID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProcessorID");

                    b.HasIndex("VGAID");

                    b.ToTable("CustomerConfigurations");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeePassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Memory", b =>
                {
                    b.Property<int>("MemoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemoryID"));

                    b.Property<string>("MemoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryPictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MemoryID");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Model", b =>
                {
                    b.Property<int>("ModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelID"));

                    b.Property<string>("DefaultAntivirus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultAntivirusPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DefaultOS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultProcessor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultProcessorPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DefaultRAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultRAMPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DefaultTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DefaultVGA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultVGAPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelPictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesID")
                        .HasColumnType("int");

                    b.HasKey("ModelID");

                    b.HasIndex("SeriesID");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerConfigID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerConfigurationCustomerConfigID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShippingMethod")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerConfigID");

                    b.HasIndex("CustomerConfigurationCustomerConfigID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Processor", b =>
                {
                    b.Property<int>("ProcessorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessorID"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProcessorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessorPictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcessorID");

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Series", b =>
                {
                    b.Property<int>("SeriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesPictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeriesID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("EcomApplicaion.Models.VGA", b =>
                {
                    b.Property<int>("VGAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VGAID"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VGADescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VGAPictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VGAID");

                    b.ToTable("VGAs");
                });

            modelBuilder.Entity("EcomApplicaion.Models.CustomerConfiguration", b =>
                {
                    b.HasOne("EcomApplicaion.Models.AntivirusSoftware", "Antivirus")
                        .WithMany("CustomerConfigurations")
                        .HasForeignKey("AntivirusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcomApplicaion.Models.Customer", "Customer")
                        .WithMany("CustomerConfigurations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcomApplicaion.Models.Memory", "Memory")
                        .WithMany("CustomerConfigurations")
                        .HasForeignKey("MemoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcomApplicaion.Models.Model", "Model")
                        .WithMany("CustomerConfigurations")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcomApplicaion.Models.Processor", "Processor")
                        .WithMany("CustomerConfigurations")
                        .HasForeignKey("ProcessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcomApplicaion.Models.VGA", "VGA")
                        .WithMany("CustomerConfigurations")
                        .HasForeignKey("VGAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antivirus");

                    b.Navigation("Customer");

                    b.Navigation("Memory");

                    b.Navigation("Model");

                    b.Navigation("Processor");

                    b.Navigation("VGA");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Model", b =>
                {
                    b.HasOne("EcomApplicaion.Models.Series", "Series")
                        .WithMany("Models")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Order", b =>
                {
                    b.HasOne("EcomApplicaion.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerConfigID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcomApplicaion.Models.CustomerConfiguration", "CustomerConfiguration")
                        .WithMany()
                        .HasForeignKey("CustomerConfigurationCustomerConfigID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerConfiguration");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Payment", b =>
                {
                    b.HasOne("EcomApplicaion.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Series", b =>
                {
                    b.HasOne("EcomApplicaion.Models.Category", "Category")
                        .WithMany("Series")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EcomApplicaion.Models.AntivirusSoftware", b =>
                {
                    b.Navigation("CustomerConfigurations");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Category", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Customer", b =>
                {
                    b.Navigation("CustomerConfigurations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Memory", b =>
                {
                    b.Navigation("CustomerConfigurations");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Model", b =>
                {
                    b.Navigation("CustomerConfigurations");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Order", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Processor", b =>
                {
                    b.Navigation("CustomerConfigurations");
                });

            modelBuilder.Entity("EcomApplicaion.Models.Series", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("EcomApplicaion.Models.VGA", b =>
                {
                    b.Navigation("CustomerConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
